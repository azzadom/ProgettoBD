-- MySQL Script generated by MySQL Workbench
-- Sun Jun 23 19:25:32 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema palestra
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema palestra
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `palestra` DEFAULT CHARACTER SET utf8 ;
USE `palestra` ;

-- -----------------------------------------------------
-- Table `palestra`.`Utenti`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`Utenti` (
  `Username` VARCHAR(45) NOT NULL,
  `Password` VARCHAR(32) NOT NULL,
  `Ruolo` ENUM('Cliente', 'Proprietario', 'PersonalTrainer') NOT NULL,
  PRIMARY KEY (`Username`));


-- -----------------------------------------------------
-- Table `palestra`.`PersonalTrainer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`PersonalTrainer` (
  `CF` VARCHAR(20) NOT NULL,
  `Nome` VARCHAR(45) NOT NULL,
  `Cognome` VARCHAR(45) NOT NULL,
  `Username` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`CF`),
  INDEX `Username_idx` (`Username` ASC) VISIBLE,
  CONSTRAINT `Username`
    FOREIGN KEY (`Username`)
    REFERENCES `palestra`.`Utenti` (`Username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `palestra`.`Clienti`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`Clienti` (
  `CF` VARCHAR(20) NOT NULL,
  `Nome` VARCHAR(45) NOT NULL,
  `Cognome` VARCHAR(45) NOT NULL,
  `PersonalTrainer` VARCHAR(20) NOT NULL,
  `Username` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`CF`),
  INDEX `Utente PT_idx` (`PersonalTrainer` ASC) VISIBLE,
  INDEX `Username_idx` (`Username` ASC) VISIBLE,
  CONSTRAINT `Utente PT`
    FOREIGN KEY (`PersonalTrainer`)
    REFERENCES `palestra`.`PersonalTrainer` (`CF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Username Cliente`
    FOREIGN KEY (`Username`)
    REFERENCES `palestra`.`Utenti` (`Username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `palestra`.`SchedaDiAllenamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`SchedaDiAllenamento` (
  `Codice` SMALLINT(4) NOT NULL AUTO_INCREMENT,
  `DataInizio` DATE NOT NULL,
  `DataFine` DATE NULL,
  `Tipo` ENUM('Corrente', 'Archiviata') NOT NULL,
  `Cliente` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`Codice`),
  INDEX `intervallo_schede` (`Cliente` ASC, `DataInizio` ASC) VISIBLE,
  UNIQUE INDEX `unique_giorno` (`DataInizio` ASC, `Cliente` ASC) VISIBLE,
  CONSTRAINT `Assegnazione`
    FOREIGN KEY (`Cliente`)
    REFERENCES `palestra`.`Clienti` (`CF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `palestra`.`SessioneDiAllenamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`SessioneDiAllenamento` (
  `Cliente` VARCHAR(20) NOT NULL,
  `Data` DATE NOT NULL,
  `OraInizio` TIME NOT NULL,
  `OraFine` TIME NOT NULL,
  `Scheda` SMALLINT(4) NOT NULL,
  `Percentuale` TINYINT(3) NOT NULL,
  PRIMARY KEY (`Cliente`, `Data`, `OraInizio`),
  INDEX `Effettua_idx` (`Cliente` ASC) VISIBLE,
  INDEX `Associata_idx` (`Scheda` ASC) VISIBLE,
  CONSTRAINT `Effettua`
    FOREIGN KEY (`Cliente`)
    REFERENCES `palestra`.`Clienti` (`CF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Associata`
    FOREIGN KEY (`Scheda`)
    REFERENCES `palestra`.`SchedaDiAllenamento` (`Codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `palestra`.`Macchinario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`Macchinario` (
  `Nome` VARCHAR(50) NOT NULL,
  `Quantità` TINYINT(2) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `palestra`.`Esercizio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`Esercizio` (
  `Nome` VARCHAR(50) NOT NULL,
  `Macchinario` VARCHAR(50) NULL,
  PRIMARY KEY (`Nome`),
  INDEX `Utilizza_idx` (`Macchinario` ASC) VISIBLE,
  CONSTRAINT `Utilizza`
    FOREIGN KEY (`Macchinario`)
    REFERENCES `palestra`.`Macchinario` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `palestra`.`EserciziScheda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `palestra`.`EserciziScheda` (
  `Scheda` SMALLINT(4) NOT NULL,
  `Esercizio` VARCHAR(50) NOT NULL,
  `Serie` TINYINT(1) UNSIGNED NOT NULL,
  `Ripetizioni` TINYINT(2) UNSIGNED NOT NULL,
  `Numero` TINYINT(2) UNSIGNED NOT NULL,
  PRIMARY KEY (`Scheda`, `Esercizio`),
  INDEX `Esercizio Riferimento_idx` (`Esercizio` ASC) INVISIBLE,
  UNIQUE INDEX `Ordine Unico` (`Scheda` ASC, `Numero` ASC) VISIBLE,
  CONSTRAINT `Scheda Riferimento`
    FOREIGN KEY (`Scheda`)
    REFERENCES `palestra`.`SchedaDiAllenamento` (`Codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Esercizio Riferimento`
    FOREIGN KEY (`Esercizio`)
    REFERENCES `palestra`.`Esercizio` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `palestra` ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `login` (in var_username varchar(45), in var_pass varchar(45), out var_role INT, out var_CF varchar(20))
BEGIN
	declare var_user_role ENUM('Cliente', 'PersonalTrainer', 'Proprietario');

	declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;
	  
	set transaction isolation level read committed;
	set transaction read only;
	start transaction;      
		
			select `Ruolo` from `Utenti`
			where `Username` = var_username and `Password` = md5(var_pass)
			into var_user_role;
			
			if var_user_role = 'Cliente' then
				set var_role = 1;
				select `CF` from `Clienti`
				where `Username` = var_username
				into var_CF;
			elseif var_user_role = 'PersonalTrainer' then
				set var_role = 2;
				select `CF` from `PersonalTrainer`
				where `Username` = var_username
				into var_CF;
			elseif var_user_role = 'Proprietario' then
				set var_role = 3;
			else	
				set var_role = 0;
			end if;
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure scheda_corrente
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `scheda_corrente` (in var_cliente varchar(20), out var_scheda smallint(4))
BEGIN
		declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	set transaction read only;
	start transaction;
		
		select Codice 
		from SchedaDiAllenamento
		where Cliente = var_cliente and Tipo = 'Corrente' 
		into var_scheda;

		select Numero, Esercizio, Serie, Ripetizioni, Macchinario
		from EserciziScheda join Esercizio on Esercizio.Nome = EserciziScheda.Esercizio
		where EserciziScheda.Scheda = var_scheda
		order by Numero;

commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registra_sessione
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `registra_sessione` (in var_cliente varchar(20), in var_data date, in var_ora_inizio time, in var_ora_fine time, in var_scheda smallint(4), percentuale tinyint(3))
BEGIN
	insert into SessioneDiAllenamento (Cliente, Data, OraInizio, OraFine, Scheda, Percentuale) values (var_cliente, var_data, var_ora_inizio, var_ora_fine, var_scheda, percentuale);	
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lista_archiviate
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `lista_archiviate` (in var_cliente varchar(20), in var_data_inizio date, in var_data_fine date)
BEGIN
	
		declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	set transaction read only;
	start transaction;
		
    select Codice, DataInizio, DataFine 
    from SchedaDiAllenamento
    where Cliente = var_cliente and Tipo = 'Archiviata' and DataInizio >= var_data_inizio and DataInizio <= var_data_fine;

commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure scheda_archiviata
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `scheda_archiviata` (in var_cliente varchar(20), in var_scheda smallint(4))
BEGIN
		declare var_count int;		

		declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;
	
	set transaction isolation level read committed;
	set transaction read only;
	start transaction;			
		
		select count(*)
		from SchedaDiAllenamento
		where Codice = var_scheda and Tipo = 'Archiviata' and Cliente = var_cliente
		into var_count;
		
		if var_count = 0 then
			signal sqlstate '45000'
			set message_text = 'La scheda non esiste o non è archiviata.';
		else
			select Numero, Esercizio, Serie, Ripetizioni, Macchinario
			from EserciziScheda join Esercizio on Esercizio.Nome = EserciziScheda.Esercizio
			where EserciziScheda.Scheda = var_scheda
			order by Numero;
		end if;
	
commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisci_scheda
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `inserisci_scheda` (in var_personal varchar(20), in var_cliente varchar(20), in var_len INT, in var_esercizi JSON)
BEGIN
        declare var_count int;  
        declare var_scheda smallint(4);

        declare i int DEFAULT 0;
        declare numero tinyint(2);
        declare nome varchar(50);
        declare serie tinyint(1);
        declare ripetizioni tinyint(2);    

        declare exit handler for sqlexception
    begin
        rollback;
        resignal;
    end;
    
    set transaction isolation level repeatable read;
    start transaction;          
        
    select count(*)
    from Clienti
    where CF = var_cliente and PersonalTrainer = var_personal
    into var_count;
    
    if var_count = 0 then
        signal sqlstate '45000'
        set message_text = 'Il cliente non esiste o non è da lei gestito.';
    end if;

    update SchedaDiAllenamento 
    set Tipo = 'Archiviata', DataFine = curdate()
    where Cliente = var_cliente and Tipo = 'Corrente';

    insert into SchedaDiAllenamento (Cliente,DataInizio,Tipo) values (var_cliente, curdate(), 'Corrente');
	
	set var_scheda=last_insert_id();

    while i < var_len do
            set numero = JSON_EXTRACT(var_esercizi, CONCAT('$[', i, '].numero'));
            set nome = JSON_UNQUOTE(JSON_EXTRACT(var_esercizi, CONCAT('$[', i, '].nome')));
            set serie = JSON_EXTRACT(var_esercizi, CONCAT('$[', i, '].serie'));
            set ripetizioni = JSON_EXTRACT(var_esercizi, CONCAT('$[', i, '].ripetizioni'));
          
            insert into EserciziScheda(Scheda, Esercizio, Numero, Serie, Ripetizioni) values (var_scheda, nome, numero, serie, ripetizioni);

            set i = i + 1;
    end while;

commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure report_sessioni
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `report_sessioni` (in var_personal varchar(20), in var_cliente varchar(20),in var_data_inizio date, in var_data_fine date)
BEGIN

        declare var_count int;

		declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;
	
	set transaction isolation level read committed;
	set transaction read only;
	start transaction;
	
		select Nome, Cognome, Data, OraInizio, timediff(OraFine,OraInizio) as Durata, Scheda, Percentuale
		from SessioneDiAllenamento join Clienti on CF = Cliente
		where Cliente = var_cliente and PersonalTrainer = var_personal and Data between var_data_inizio and var_data_fine;
		
	commit;
		
		if not found_rows() then
			signal sqlstate '45000'
			set message_text = 'Nessuna sessione di allenamento trovata.';
		end if;
		
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisci_macchinario
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `inserisci_macchinario` (in var_nome varchar(50), in var_quantità tinyint(2))
BEGIN 
	declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	start transaction;
		
    	if exists (select * from Macchinario where Nome = var_nome) then
        		update Macchinario set Quantità = Quantità + var_quantità where Nome = var_nome;
		else
        		insert into Macchinario (Nome, Quantità) values (var_nome, var_quantità);
    	end if;

commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisci_esercizio
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `inserisci_esercizio` (in var_nome varchar(50), in var_macchinario varchar(50))
BEGIN 

	insert into Esercizio (Nome, Macchinario) values (var_nome, var_macchinario);
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lista_personal
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `lista_personal` ()
BEGIN
declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	set transaction read only;
	start transaction;

		select PersonalTrainer.CF, PersonalTrainer.Nome, PersonalTrainer.Cognome, Count(Clienti.CF) as NumClienti
		from PersonalTrainer left join Clienti on PersonalTrainer.CF = Clienti.PersonalTrainer
		group by PersonalTrainer.CF;
    
    commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_password
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `update_password` (in var_username VARCHAR(45), in var_password VARCHAR(32))
BEGIN
    if strcmp(var_password, 'Nuova') != 0 then
        update Utenti
        set Password = md5(var_password)
        where Username = var_username;
    elseif strcmp(var_password, 'Nuova') = 0 then
		signal sqlstate '45000'
        set message_text = 'Password non valida';
    end if;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure nuovo_personal
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `nuovo_personal` (in var_personal VARCHAR(20), in var_nome VARCHAR(45),in var_cognome VARCHAR(45), in var_nome_utente VARCHAR(45))
BEGIN
    declare exit handler for sqlexception
	
    begin
		rollback;
		resignal;
	end;

	set transaction isolation level read uncommitted;
	start transaction;

    insert into Utenti (Username, Password, Ruolo) values (var_nome_utente, md5('Nuova'), 'PersonalTrainer');
        
    insert into PersonalTrainer (CF, Nome, Cognome, Username) values (var_personal, var_nome, var_cognome, var_nome_utente);

	commit;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure nuovo_cliente
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `nuovo_cliente` (in var_cliente VARCHAR(20), in var_nome VARCHAR(45),in var_cognome VARCHAR(45), in var_personal VARCHAR(20), in var_nome_utente VARCHAR(45))
BEGIN
    
    declare exit handler for sqlexception
	
    begin
		rollback;
		resignal;
	end;

	set transaction isolation level read uncommitted;
	start transaction;
    
    insert into Utenti (Username, Password, Ruolo) values (var_nome_utente, md5('Nuova'), 'Cliente');
        
    insert into Clienti (CF, Nome, Cognome, PersonalTrainer, Username) values (var_cliente, var_nome, var_cognome,var_personal, var_nome_utente);
		
	commit;

END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lista_macchinari
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `lista_macchinari` ()
BEGIN
	declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	set transaction read only;
	start transaction;
    	select *
    	from Macchinario;
	commit;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lista_esercizi
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `lista_esercizi` ()
BEGIN
	
		declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	set transaction read only;
	start transaction;
		
    select *
    from Esercizio;

commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lista_clienti
-- -----------------------------------------------------

DELIMITER $$
USE `palestra`$$
CREATE PROCEDURE `lista_clienti` (in var_personal varchar(20))
BEGIN
	
		declare exit handler for sqlexception
	begin
		rollback;
		resignal;
	end;

	set transaction isolation level read committed;
	set transaction read only;
	start transaction;
		
    select CF, Nome, Cognome 
    from Clienti
    where PersonalTrainer = var_personal;

commit;
END$$

DELIMITER ;
USE `palestra`;

DELIMITER $$
USE `palestra`$$
CREATE DEFINER = CURRENT_USER TRIGGER `palestra`.`PersonalTrainer_BEFORE_INSERT` BEFORE INSERT ON `PersonalTrainer` FOR EACH ROW
BEGIN
	IF NOT NEW.CF REGEXP '^[A-Z]{6}[0-9]{2}[A-Z][0-9]{2}[A-Z][0-9]{3}[A-Z]$' THEN
		SIGNAL SQLSTATE '45000' 
		SET MESSAGE_TEXT = 'Il CF non è valido.';
	 ELSEIF NOT NEW.Nome REGEXP '^[a-zA-Z]*( [a-zA-Z]*)?$' OR NOT NEW.Cognome REGEXP '^[a-zA-Z]*( [a-zA-Z]*)?$' THEN
		 SIGNAL SQLSTATE '45000' 
		 SET MESSAGE_TEXT = 'Il nome o il cognome contiene caratteri numerici o speciali.';
	END IF;
END$$

USE `palestra`$$
CREATE DEFINER = CURRENT_USER TRIGGER `palestra`.`Clienti_BEFORE_INSERT` BEFORE INSERT ON `Clienti` FOR EACH ROW
BEGIN
	IF NOT NEW.CF REGEXP '^[A-Z]{6}[0-9]{2}[A-Z][0-9]{2}[A-Z][0-9]{3}[A-Z]$' THEN
		SIGNAL SQLSTATE '45000' 
		SET MESSAGE_TEXT = 'Il CF non è valido.';
	ELSEIF NOT NEW.Nome REGEXP '^[a-zA-Z]*( [a-zA-Z]*)?$' OR NOT NEW.Cognome REGEXP '^[a-zA-Z]*( [a-zA-Z]*)?$' THEN
		 SIGNAL SQLSTATE '45000' 
		 SET MESSAGE_TEXT = 'Il nome o il cognome contiene caratteri numerici o speciali.';
	END IF;
END$$

USE `palestra`$$
CREATE DEFINER = CURRENT_USER TRIGGER `palestra`.`SessioneDiAllenamento_BEFORE_INSERT` BEFORE INSERT ON `SessioneDiAllenamento` FOR EACH ROW
BEGIN
    IF NEW.Percentuale > 100 OR NEW.Percentuale <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La percentuale non è valida.';
    ELSEIF NEW.OraFine <= NEW.OraInizio THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'OraFine non può essre minore o uguale di OraInizio.';
    END IF;
END$$

USE `palestra`$$
CREATE DEFINER = CURRENT_USER TRIGGER `palestra`.`Macchinario_BEFORE_INSERT` BEFORE INSERT ON `Macchinario` FOR EACH ROW
BEGIN
    IF NOT NEW.Nome REGEXP '^[a-zA-Z]*( [a-zA-Z]*)?$' THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Il nome contiene caratteri numerici o speciali.';
	ELSEIF NEW.Quantità <= 0 THEN
		SIGNAL SQLSTATE '45000' 
		SET MESSAGE_TEXT = 'La quantità non è valida.';
    END IF;

END$$

USE `palestra`$$
CREATE DEFINER = CURRENT_USER TRIGGER `palestra`.`Esercizio_BEFORE_INSERT` BEFORE INSERT ON `Esercizio` FOR EACH ROW
BEGIN
    IF NOT NEW.Nome REGEXP '^[a-zA-Z]*( [a-zA-Z]*)?$' THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Il nome contiene caratteri numerici o speciali.';
    END IF;
END$$

USE `palestra`$$
CREATE DEFINER = CURRENT_USER TRIGGER `palestra`.`EserciziScheda_BEFORE_INSERT` BEFORE INSERT ON `EserciziScheda` FOR EACH ROW
BEGIN
	IF NEW.Numero <= 0 OR New.Serie <=0 OR New.Ripetizioni <=0 THEN
        SIGNAL SQLSTATE '45000' 
		SET MESSAGE_TEXT = 'Una quantità tra numero, serie e ripetizione non è valida.';
	END IF;
END$$


DELIMITER ;
CREATE USER 'login' IDENTIFIED BY 'login';

GRANT EXECUTE ON procedure `palestra`.`login` TO 'login';
GRANT EXECUTE ON procedure `palestra`.`update_password` TO 'login';
CREATE USER 'personaltrainer' IDENTIFIED BY 'personaltrainer';

GRANT EXECUTE ON procedure `palestra`.`report_sessioni` TO 'personaltrainer';
GRANT EXECUTE ON procedure `palestra`.`inserisci_scheda` TO 'personaltrainer';
GRANT EXECUTE ON procedure `palestra`.`lista_clienti` TO 'personaltrainer';
GRANT EXECUTE ON procedure `palestra`.`lista_esercizi` TO 'personaltrainer';
CREATE USER 'cliente' IDENTIFIED BY 'cliente';

GRANT EXECUTE ON procedure `palestra`.`scheda_archiviata` TO 'cliente';
GRANT EXECUTE ON procedure `palestra`.`scheda_corrente` TO 'cliente';
GRANT EXECUTE ON procedure `palestra`.`lista_archiviate` TO 'cliente';
GRANT EXECUTE ON procedure `palestra`.`registra_sessione` TO 'cliente';
CREATE USER 'proprietario' IDENTIFIED BY 'proprietario';

GRANT EXECUTE ON procedure `palestra`.`inserisci_macchinario` TO 'proprietario';
GRANT EXECUTE ON procedure `palestra`.`inserisci_esercizio` TO 'proprietario';
GRANT EXECUTE ON procedure `palestra`.`lista_macchinari` TO 'proprietario';
GRANT EXECUTE ON procedure `palestra`.`lista_personal` TO 'proprietario';
GRANT EXECUTE ON procedure `palestra`.`nuovo_cliente` TO 'proprietario';
GRANT EXECUTE ON procedure `palestra`.`nuovo_personal` TO 'proprietario';

SET GLOBAL event_scheduler = ON;

DELIMITER //
CREATE EVENT IF NOT EXISTS rimozione_sessioni_vecchie
ON SCHEDULE EVERY 1 MONTH
STARTS CURRENT_TIMESTAMP + INTERVAL 6 MONTH
ON COMPLETION PRESERVE
COMMENT 'Rimozione vecchie sessioni di allenamento'
DO
BEGIN
	DELETE FROM SessioneDiAllenamento 
	WHERE Data < DATE_SUB(NOW(), INTERVAL 6 MONTH);
END
//

CREATE EVENT IF NOT EXISTS rimozione_schede_vecchie
ON SCHEDULE EVERY 1 MONTH
STARTS CURRENT_TIMESTAMP + INTERVAL 12 MONTH
ON COMPLETION PRESERVE
COMMENT 'Rimozione vecchie schede di allenamento'
DO
BEGIN
	DELETE FROM SchedaDiAllenamento 
	WHERE DataInizio < DATE_SUB(NOW(), INTERVAL 12 MONTH) 
               AND Tipo = 'Archiviata';
END
//

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Data for table `palestra`.`Utenti`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`Utenti` (`Username`, `Password`, `Ruolo`) VALUES ('p.pippo', '0c88028bf3aa6a6a143ed846f2be1ea4', 'Proprietario');
INSERT INTO `palestra`.`Utenti` (`Username`, `Password`, `Ruolo`) VALUES ('l.luca', 'ff377aff39a9345a9cca803fb5c5c081', 'PersonalTrainer');
INSERT INTO `palestra`.`Utenti` (`Username`, `Password`, `Ruolo`) VALUES ('m.mario', 'de2f15d014d40b93578d255e6221fd60', 'Cliente');

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`PersonalTrainer`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`PersonalTrainer` (`CF`, `Nome`, `Cognome`, `Username`) VALUES ('LCNLCU34M12A017M', 'Luca', 'Claudione', 'l.luca');

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`Clienti`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`Clienti` (`CF`, `Nome`, `Cognome`, `PersonalTrainer`, `Username`) VALUES ('RSSMRA80L05F593A', 'Mario', 'Rossi', 'LCNLCU34M12A017M', 'm.mario');

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`SchedaDiAllenamento`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`SchedaDiAllenamento` (`Codice`, `DataInizio`, `DataFine`, `Tipo`, `Cliente`) VALUES (0001, '2023-01-25', '2023-03-25', 'Archiviata', 'RSSMRA80L05F593A');
INSERT INTO `palestra`.`SchedaDiAllenamento` (`Codice`, `DataInizio`, `DataFine`, `Tipo`, `Cliente`) VALUES (0002, '2023-03-25', NULL, 'Corrente', 'RSSMRA80L05F593A');

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`SessioneDiAllenamento`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-01-26', '10:00', '11:30', 0001, 50);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-01-28', '16:45', '17:50', 0001, 70);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-02-02', '19:00', '19:30', 0001, 30);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-02-05', '19:15', '20:30', 0001, 90);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-02-20', '18:17', '19:44', 0001, 40);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-02-22', '18:30', '19:46', 0001, 100);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-03-01', '17:15', '18:30', 0001, 100);
INSERT INTO `palestra`.`SessioneDiAllenamento` (`Cliente`, `Data`, `OraInizio`, `OraFine`, `Scheda`, `Percentuale`) VALUES ('RSSMRA80L05F593A', '2023-03-05', '16:23', '18:00', 0001, 90);

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`Macchinario`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Lat Machine', 2);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Barra Trazioni', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Pulley', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Hyperextension', 2);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Vogatore', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Panca', 2);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Pectoral Machine', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Chest Press', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Shoulder Press', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Leg Extension', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Leg Curl', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Hack Squat', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Pressa', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Abductor Machine', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Adductor Machine', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Calf Machine', 1);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Panca Addominali', 2);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Cyclette', 3);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Tapis Roulant', 3);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Ellittica', 3);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Manubrio', 5);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Bilanciere', 3);
INSERT INTO `palestra`.`Macchinario` (`Nome`, `Quantità`) VALUES ('Cavi', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`Esercizio`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Hand Plank', NULL);
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Squat', NULL);
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Flessioni', NULL);
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Corsa', 'Tapis Roulant');
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Curl', 'Manubrio');
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Riscaldamento', 'Cyclette');
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Piegamenti Panca', 'Panca Addominali');
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Spalle ', 'Shoulder Press');
INSERT INTO `palestra`.`Esercizio` (`Nome`, `Macchinario`) VALUES ('Pettorali', 'Pectoral Machine');

COMMIT;


-- -----------------------------------------------------
-- Data for table `palestra`.`EserciziScheda`
-- -----------------------------------------------------
START TRANSACTION;
USE `palestra`;
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0001, 'Squat', 3, 8, 2);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0001, 'Flessioni', 3, 12, 1);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0001, 'Piegamenti Panca', 3, 15, 3);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0001, 'Spalle', 4, 7, 4);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0001, 'Pettorali', 4, 8, 5);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0002, 'Squat', 3, 8, 2);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0002, 'Hand Plank', 3, 10, 3);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0002, 'Spalle', 2, 10, 4);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0002, 'Corsa', 1, 15, 1);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0002, 'Flessioni', 3, 5, 5);
INSERT INTO `palestra`.`EserciziScheda` (`Scheda`, `Esercizio`, `Serie`, `Ripetizioni`, `Numero`) VALUES (0002, 'Riscaldamento', 1, 15, 6);

COMMIT;

